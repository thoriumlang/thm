// computes fibonacci
// in:  r0 contains the index to iteration count
// out: r3 contains the result

    LOAD r3, 0 // fib(0)
    LOAD r4, 1 // fib(1)

    // if n == 0, we have the result in r3
    CMP  r0, r3
    JE   @end

    // if n != 1, we have to compute the result
    CMP  r0, r4
    JNE  @loop

    // if n == 1, we have the result in r2, just need to move it
    MOV  r3, r4
    JMP  @end

:loop
    // compute next index
    MOV r5, r3
    MOV r3, r4
    ADD r4, r5

    // decrement counter, continue looping if > 0
    DEC r0
    JNE @loop

:end
    MOV r0, r1 // restore initial target
    HALT
