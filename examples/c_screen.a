
    J    @start

// in: r0 is the buffer idx
:select_buffer
    PUSH r1
    PUSH r2
    MOV  r1, $__video_meta       // load $_video_meta to r2
    LOAD r2, r1
    AND  r2, 0xfffffffe          // reset 1st bit
    OR   r2, r0                  // set 1st bit
    STOR r1, r2                  // store r2 back to $_video_meta
    POP  r2
    POP  r1
    RET

:start
    // check if video available
    MOV  r1, $__video_meta
    LOAD r1, r1
    AND  r1, 0x00000002          // video enabled flag
    JEQ  @end                    // jump to @end if meta & 2 == 0

    MOV  r0, 0x000000ff // blue
    MOV  r1, 0x00ff0000 // red
    MOV  r2, 4
    MOV  r3, $__video_buffer_size

:loop
// start blue
    // select buffer 0
    PUSH r0
    MOV  r0, 0x00000000
    CALL @select_buffer
    POP  r0

    MOV  r5, $__video_buffer1
    MOV  r6, $__video_buffer1
    ADD  r6, r3                 // r5 = buffer1, r6 = end of buffer1

:blue
    STOR r5, r0
    ADD  r5, r2                 // move to next pixel
    CMP  r5, r6
    JNE  @blue

// start red
    // select buffer 1
    PUSH r0
    MOV  r0, 0x00000001
    CALL @select_buffer
    POP  r0

    MOV  r5, $__video_buffer2
    MOV  r6, $__video_buffer2
    ADD  r6, r3                 // r5 = buffer2, r6 = end of buffer2

:red
    STOR r5, r1
    ADD  r5, r2                 // move to next pixel
    CMP  r5, r6
    JNE  @red

    J    @loop

:end
    HALT
