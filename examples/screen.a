
#base 0x1000

    J    @start

// in: r0 is the buffer idx
:select_buffer
    PUSH r1, r2
    MOV  r1, $__video_meta        // load $_video_meta to r2
    LOAD r2, r1
    AND  r2, 0xfffffffe           // reset 1st bit
    OR   r2, r0                   // set 1st bit
    STOR r1, r2                   // store r2 back to $_video_meta
    POP  r2, r1
    RET

// set &vsync_flag to 1 upon vsync interrupt
:vsync_int_handler
    MOV  r0, 1
    MOV  r1, &vsync_flag
    STOR r1, r0
    RET

:configure_vsync_int_handler
    $word_width = 4
    $vsync_interrupt = 4
    MOV  r1, $vsync_interrupt
    MUL  r1, $word_width
    MOV  r0, $__idt_start
    ADD  r0, r1                    // r1 contains the address of the handler pointer in the idt
    MOV  r1, &vsync_int_handler
    STOR r0, r1
    UMI  4
    RET

// waits for a interrupt and then loop until vsync_flag is set
:wait_vsync
    PUSH r0, r1
:wait_vsync_1
    WFI
    MOV  r0, &vsync_flag
    LOAD r1, r0
    JEQ  @wait_vsync_1            // if &vsnyc_flag == 0 -> wait again
    MOV  r1, 0                    // else reset to 0 and return
    STOR r0, r1
    POP  r1, r0
    RET

// check if video available
:check_video
    MOV  r1, $__video_meta
    LOAD r1, r1
    AND  r1, 0x00000002           // video enabled flag
    JEQ  @end                     // jump to @end if meta & 2 == 0
    RET

:start
    CALL  @check_video
    CALL  @configure_vsync_int_handler
    INE

// setup some constants
    MOV  r0, 0x000000ff // blue
    MOV  r1, 0x00ff0000 // red
    MOV  r2, 4          // pixel_width

:loop
// start blue
    // select buffer 0, we will write in buffer 1
    PUSH r0
    MOV  r0, 0x00000000
    CALL @select_buffer
    POP  r0

    MOV  r5, $__video_buffer1
    MOV  r6, $__video_buffer1
    ADD  r6, $__video_buffer_size // r5 = buffer1, r6 = end of buffer1

:blue
    STOR r5, r0
    ADD  r5, r2                   // move to next pixel
    CMP  r5, r6
    JNE  @blue

// start red
    CALL @wait_vsync
    // select buffer 1, we will write in buffer 0
    PUSH r0
    MOV  r0, 0x00000001
    CALL @select_buffer
    POP  r0

    MOV  r5, $__video_buffer0
    MOV  r6, $__video_buffer0
    ADD  r6, $__video_buffer_size // r5 = buffer2, r6 = end of buffer0

:red
    STOR r5, r1
    ADD  r5, r2                   // move to next pixel
    CMP  r5, r6
    JNE  @red

    CALL @wait_vsync
    J    @loop

:end
    HALT

#word vsync_flag 0
