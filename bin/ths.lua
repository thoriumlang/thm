#!/usr/bin/env lua

---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cpollet.
--- DateTime: 16.12.21 20:32
---

local requireRel
if arg and arg[0] then
    package.path = arg[0]:match("(.-)[^\\/]+$") .. "?.lua;" .. package.path
    requireRel = require
elseif ... then
    local d = (...):match("(.-)[^%.]+$")
    function requireRel(module)
        return require(d .. module)
    end
end

requireRel("ths-lexer")

local function read_file(path)
    local file = io.open(path, "rb") -- r read mode and b binary mode
    if not file then
        return nil
    end
    local content = file:read "*a" -- *a or *all reads the whole file
    file:close()
    return content
end

local lexer = Lexer:new(read_file(arg[1]));

local ident = ""
while (true) do
    local token = lexer:next(Mode.NORMAL)
    if token.type == TokenType.EOF then
        break
    elseif token.type == TokenType.LPAR then
        io.write(ident .. "(\n")
        ident = ident .. "  "
    elseif token.type == TokenType.RPAR then
        ident = ident:sub(1, #ident - 2)
        io.write(ident .. ")\n")
    elseif token.type == TokenType.COMMA then
        -- io.write(ident .. ",")
    elseif token.type == TokenType.KEYWORD then
        io.write(ident .. "[kw: " .. token.value .. "]\n")
    elseif token.type == TokenType.OP then
        io.write(ident .. "[op: " .. token.value .. "]\n")
    elseif token.type == TokenType.TEXT then
        io.write(ident .. "[tx: " .. token.value .. "]\n")
    elseif token.type == TokenType.NUMBER then
        io.write(ident .. "[nr: " .. token.value .. "]\n")
    elseif token.type == TokenType.REGISTER then
        io.write(ident .. "[r:  " .. token.value .. "]\n")
    elseif token.type == TokenType.WORD then
        io.write(ident .. "[w:  " .. token.value .. "]\n")
    elseif token.type == TokenType.BYTE then
        io.write(ident .. "[b:  " .. token.value .. "]\n")
    elseif token.type == TokenType.FLAG then
        io.write(ident .. "[fg: " .. token.value .. "]\n")
    end
end